name: pytest on Windows

on:
  pull_request:
    branches:
      - develop
      - main
      - release/**
      - feature/**
      - hotfix/**
  push:
    branches:
      - develop
      - main
      - release/**
      - feature/**
      - hotfix/**

jobs:
  pytest:
    name: pytest (Windows)
    strategy:
      fail-fast: false
      matrix:
        python_ver: [3.7, 3.8, 3.9]
    defaults:
      run:
        shell: bash
    runs-on: windows-latest
    env:
      POETRY_VIRTUALENVS_CREATE: true
      POETRY_VIRTUALENVS_IN_PROJECT: true
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python version
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python_ver }}
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | POETRY_HOME=$HOME/.poetry python -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      env:
        # Increase this value to reset cache if poetry.lock has not changed
        CACHE_NUMBER: 1
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}-{{ env.CACHE_NUMBER }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s poetry run pip --version || rm -rf .venv
    - name: Install dependencies
      run: poetry install -vvv
    - name: pytest
      run: poetry run pytest --cov-report=xml --cov=geoh5py --cov-branch --cov-fail-under=80
    - name: Codecov
      if: ${{ success() && matrix.python_ver == '3.7' }}
      uses: codecov/codecov-action@v1
      with:
        name: GitHub
