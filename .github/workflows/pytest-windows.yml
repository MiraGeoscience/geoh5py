name: pytest on Windows

on:
  pull_request:
  push:
    branches:
      - develop
      - main
      - release/**
      - feature/**
      - hotfix/**

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  source_dir: geoh5py

jobs:
  pytest:
    name: pytest (Windows)
    strategy:
      fail-fast: false
      matrix:
        python_ver: ['3.8', '3.9', '3.10']
    defaults:
      run:
        shell: bash
    runs-on: windows-latest
    env:
      POETRY_VIRTUALENVS_CREATE: true
      POETRY_VIRTUALENVS_IN_PROJECT: true
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_ver }}
      - name: Get full Python version
        id: full-python-version
        run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=$HOME/.poetry python -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        env:
          # Increase this value to reset cache if poetry.lock has not changed
          CACHE_NUMBER: 1
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}-{{ env.CACHE_NUMBER }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install dependencies
        run: poetry install -vvv
      - name: pytest
        run: poetry run pytest --cov --cov-report=xml
      - name: Codecov
        if: ${{ success() && matrix.python_ver == '3.10' }}
        uses: codecov/codecov-action@v3
        with:
          name: GitHub
