[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "geoh5py"
description = "Python API for geoh5, an open file format for geoscientific data"
readme = "package.rst"
requires-python = "~=3.10"
license = "GPL-3.0-or-later"
license-files = { paths = ["COPYING", "COPYING.LESSER"] }
authors = [
    { name = "MiraGeoscience", email = "support@mirageoscience.com" }
]
maintainers = [
    { name = "Benjamin Kary", email = "benjamink@mirageoscience.com" },
    { name = "Dominique Fournier", email = "dominiquef@mirageoscience.com" },
    { name = "Matthieu Cedou", email = "matthieuc@mirageoscience.com" }
]
keywords = [
    "geology",
    "geophysics",
    "data",
    "interoperability"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "pydantic~=2.5.2",
    "h5py",
    "numpy~=1.26.0",
    "Pillow~=10.3.0"
]
dynamic = ["version"]
[project.urls]
Documentation = "https://mirageoscience-geoh5py.readthedocs-hosted.com/"
Homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"
Repository = "https://github.com/MiraGeoscience/geoh5py"

[tool.hatch.version]
path = "geoh5py/__init__.py"

[tool.hatch.build.targets.sdist] # What to include given the target
include = [
    "geoh5py",
    "COPYING",
    "COPYING.LESSER",
    "LICENSE",
    "README.rst",
    "THIRD_PARTY_SOFTWARE.rst",
    "docs/**/THIRD_PARTY_SOFTWARE.rst",
]
exclude = [
    "geoh5py/handlers/*",
    "geoh5py/interfaces/*"
]

[tool.hatch.build.targets.wheel]
include = [
    "/geoh5py",
    "COPYING",
    "COPYING.LESSER",
    "LICENSE",
    "README.rst",
    "THIRD_PARTY_SOFTWARE.rst",
    "docs/**/THIRD_PARTY_SOFTWARE.rst",
]
exclude = [
    "/geoh5py/handlers/*",
    "/geoh5py/interfaces/*"
]

[tool.hatch.envs.default]
dependencies = [
    "pygments",
    "pylint",
    "scipy~=1.14.0",
]

[tool.hatch.envs.test]
dependencies = [
    "coverage",
    "pytest",
    "pytest-cov",
]
matrix-name-format = "{variable}_{value}" # (eg py3.12)

[tool.hatch.envs.test.scripts] # (eg hatch run test:cov)
all = [
    "pytest test/"
]
test = "pytest tests"
cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx~=3.0",
    "sphinx-autodoc-typehints~=1.10",
    "sphinx-rtd-theme~=0.4.3",
]

[tool.hatch.envs.docs.scripts]
html = "sphinx-build -c docs -b html -d docs/"

[tool.coverage.run]
branch = true
source = ["geoh5py"]
omit = [
    "geoh5py/handlers/*",
    "geoh5py/interfaces/*"
]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]
fail_under = 90

[tool.coverage.html]
skip_empty = true
skip_covered = true

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true
plugins = [
#    "numpy.typing.mypy_plugin",
    "pydantic.mypy"
]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
    "TID252", # TODO
    "RUF012", # TODO
    "UP031", # TODO
    "UP038", # TODO
    "RUF001", # TODO
    "RUF003", # TODO
    "RUF005", # TODO
    "RUF015", # TODO
    "B008", # TODO
    "B018", # TODO
    "B024", # TODO
    "B027", # TODO
    "E721", # TODO
    "C409", # TODO
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine
