version: 2

# Set the version of Python and other tools you might need
build:
  os: "ubuntu-22.04"
  tools:
    python: "mambaforge-22.9"
  jobs:
    post_checkout:
      # Configure Git LFS
      - echo "[RTD] Configure Git LFS"
      # Update version of Git LFS as needed
      # Download and install latest Git LFS
      - |
        set -e
        LFS_VERSION="3.4.0"
        wget "https://github.com/git-lfs/git-lfs/releases/download/v${LFS_VERSION}/git-lfs-linux-amd64-v${LFS_VERSION}.tar.gz"
        tar xzf "git-lfs-linux-amd64-v${LFS_VERSION}.tar.gz" --strip-components=1 "git-lfs-${LFS_VERSION}/git-lfs"
        rm "git-lfs-linux-amd64-v${LFS_VERSION}.tar.gz"
      # Configure Git LFS paths and settings
      - |
        set -e

        git_lfs_path="$(pwd)"
        git config filter.lfs.process "$git_lfs_path/git-lfs filter-process"
        git config filter.lfs.smudge  "$git_lfs_path/git-lfs smudge -- %f"
        git config filter.lfs.clean "$git_lfs_path/git-lfs clean -- %f"
      # Fetch with Git LFS
      - |
        set -e
        ./git-lfs install
        ./git-lfs fetch
        ./git-lfs checkout

      # Unshallow repository for auto-versioning
      - echo "[RTD] Unshallow repository for version detection"
      - |
        set -e

        git fetch origin --no-tags '+refs/tags/v*:refs/tags/v*' --depth=1

        # Get latest version tag
        latest_tag="$(git tag -l 'v[0-9]*' --sort=-v:refname | head -n1)"
        echo "[RTD] Latest version tag: ${latest_tag:-<none>}"

        # Calculate distance and deepen repository
        if [ -z "$latest_tag" ]; then
          echo "[RTD] Warning: No version tags found !!!"
        else
          distance=$(git rev-list --count HEAD ^"$latest_tag" 2>/dev/null || echo "")
          if [ -n "$distance" ] && [ "$distance" -gt 0 ]; then
            deepen_by=$((distance + 10))
            echo "[RTD] Distance to latest tag: $distance, deepening by: $deepen_by"
            git fetch origin --deepen="$deepen_by"
          else
            echo "[RTD] Using default deepen of 50 commits"
            git fetch origin --deepen=50
          fi
          if ! git rev-parse "$latest_tag" >/dev/null 2>&1; then
            echo "[RTD] Tag still not reachable, doing full unshallow"
            git fetch origin --unshallow
          fi
        fi

    pre_build:
      # Generate on-the-fly Sphinx configuration from Jupyter Book's _config.yml
      - "jupyter-book config sphinx docs/"
      - "pip install . --no-deps"

# Build documentation in the docs/ directory with Sphinx
sphinx:
  builder: html
  configuration: docs/conf.py
  fail_on_warning: false

conda:
    environment: docs/environment.yml
